
services:
  # Banco principal (ordens, pagamentos, etc.)
  postgres:
    image: postgres:16-alpine
    container_name: laboratorio_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB_APP:-lab_protese}
    ports:
      - "5433:5432" # exposto para você acessar de fora
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - laboratorio_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Banco do Identity
  postgres_identity:
    image: postgres:16-alpine
    container_name: laboratorio_postgres_identity
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB_IDENTITY:-lab_identity}
    ports:
      - "5434:5432"
    volumes:
      - postgres_identity_data:/var/lib/postgresql/data
    networks:
      - laboratorio_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API .NET 9
  api:
    build:
      context: .
      dockerfile: API/Dockerfile
    container_name: laboratorio_api
    ports:
      - "7058:80"   # API acessível no host em http://localhost:7058
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      # connection strings injetadas via env
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=${POSTGRES_DB_APP:-lab_protese};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-postgres}"
      ConnectionStrings__IdentityConnection: "Host=postgres_identity;Port=5432;Database=${POSTGRES_DB_IDENTITY:-lab_identity};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-postgres}"
      Jwt__Key: ${JWT_KEY:-k8sL9mN2pQ5rS8tU1vW4xY7zA0bC3dE6fG9hI2jK5lM8nO1pQ4rS7tU0vW3xY6zA9bC2dE5f}
      Jwt__Issuer: ${JWT_ISSUER:-http://localhost:7058}
      Jwt__Audience: ${JWT_AUDIENCE:-http://localhost:7058}
    depends_on:
      postgres:
        condition: service_healthy
      postgres_identity:
        condition: service_healthy
    volumes:
      - ./API/wwwroot/uploads:/app/wwwroot/uploads
    networks:
      - laboratorio_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Angular client (modo desenvolvimento com ng serve)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: laboratorio_client
    ports:
      - "4200:4200" # frontend em http://localhost:4200
    environment:
      - NODE_ENV=development
    depends_on:
      - api
    networks:
      - laboratorio_network

networks:
  laboratorio_network:

volumes:
  postgres_data:
  postgres_identity_data:
